<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Converge</title>
    <link>http://converge.aster.is/</link>
    <description>Recent content on Converge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Sep 2016 15:32:02 -0500</lastBuildDate>
    <atom:link href="http://converge.aster.is/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>user.group</title>
      <link>http://converge.aster.is/resources/user-group/</link>
      <pubDate>Fri, 16 Sep 2016 15:32:02 -0500</pubDate>
      
      <guid>http://converge.aster.is/resources/user-group/</guid>
      <description>

&lt;p&gt;Group renders group data&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;# create a group, only works on linux
user.group &amp;quot;group&amp;quot; {
  gid   = &amp;quot;123&amp;quot;
  name  = &amp;quot;test&amp;quot;
  state = &amp;quot;present&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gid&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gid is the group gid.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Name is the group name.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;state&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;State is whether the group should be present.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>user.user</title>
      <link>http://converge.aster.is/resources/user-user/</link>
      <pubDate>Fri, 16 Sep 2016 15:26:27 -0500</pubDate>
      
      <guid>http://converge.aster.is/resources/user-user/</guid>
      <description>

&lt;p&gt;User renders user data&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;# create a user, only works on linux
user.user &amp;quot;user&amp;quot; {
  username = &amp;quot;test&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uid&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UID is the user ID.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gid&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gid is the primary group ID for user.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Username is the user login name.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Name is the user description.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;home_dir&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HomeDir is the user&amp;rsquo;s login directory. By default,  the login
name is appended to the home directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;state&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;State is whether the user should be present.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>file.directory</title>
      <link>http://converge.aster.is/resources/file-directory/</link>
      <pubDate>Tue, 13 Sep 2016 11:04:59 -0500</pubDate>
      
      <guid>http://converge.aster.is/resources/file-directory/</guid>
      <description>

&lt;p&gt;Directory makes sure a directory is present on disk&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;# file.directory will create or ensure a directory is present
file.directory &amp;quot;hello&amp;quot; {
  destination = &amp;quot;hello&amp;quot;
}

# it can also accept a &amp;quot;create_all&amp;quot; parameter to do the equivalent of &amp;quot;mkdir -p&amp;quot;
file.directory &amp;quot;deeper&amp;quot; {
  destination = &amp;quot;deeper/a/b/c&amp;quot;
  create_all  = true
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the location on disk to make the directory&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;create_all&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;whether or not to create all parent directories on the way up&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Module Verification</title>
      <link>http://converge.aster.is/module-verification/</link>
      <pubDate>Tue, 13 Sep 2016 00:13:59 -0500</pubDate>
      
      <guid>http://converge.aster.is/module-verification/</guid>
      <description>

&lt;p&gt;In the future, converge will require modules to be signed using a gpg detached signature.
The following steps will walk you through the creation of a gpg keypair suitable for signing a module.
If you have an existing gpg signing key skip to the &lt;a href=&#34;#signing-modules&#34;&gt;Signing modules&lt;/a&gt; step.&lt;/p&gt;

&lt;h2 id=&#34;generate-a-gpg-signing-key&#34;&gt;Generate a gpg signing key&lt;/h2&gt;

&lt;p&gt;Create a file named &lt;code&gt;gpg-batch&lt;/code&gt; with the following content.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%echo Generating a default key
Key-Type: RSA
Key-Length: 2048
Subkey-Type: RSA
Subkey-Length: 2048
Name-Real: Test Asteris
Name-Comment: Test Key
Name-Email: test@aster.is
Expire-Date: 0
Passphrase: asteris
%pubring test.pub
%secring test.sec
%commit
%echo done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use this to quickly generate a key pair using batch mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --batch --gen-key gpg-batch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can verify this worked by listing the keys.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --no-default-keyring --secret-keyring ./test.sec --keyring ./test.pub --list-keys
./test.pub

----------
pub   2048R/475CC928 2016-08-07
uid       [ unknown] Test Asteris (Test signing key) &amp;lt;test@aster.is&amp;gt;
sub   2048R/1327D89C 2016-08-07
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can tell from the output above, that the level of trust for the signing key is unknown. This will cause the following warning if we attempt to validate a module signed with this key using the gpg cli:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg: WARNING: This key is not certified with a trusted signature!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we know exactly where this key came from let&amp;rsquo;s trust it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --no-default-keyring --secret-keyring ./test.sec --keyring ./test.pub --edit-key 475CC928

gpg (GnuPG) 1.4.20; Copyright (C) 2015 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Secret key is available.

pub  2048R/475CC928  created: 2016-08-07  expires: never       usage: SCEA
                     trust: unknown      validity: unknown
sub  2048R/1327D89C  created: 2016-08-07  expires: never       usage: SEA
[ unknown] (1). Test Asteris (Test signing key) &amp;lt;test@aster.is&amp;gt;

Please decide how far you trust this user to correctly verify other users&#39; keys
(by looking at passports, checking fingerprints from different sources, etc.)

  1 = I don&#39;t know or won&#39;t say
  2 = I do NOT trust
  3 = I trust marginally
  4 = I trust fully
  5 = I trust ultimately
  m = back to the main menu

Your decision? 5
Do you really want to set this key to ultimate trust? (y/N) y

pub  2048R/475CC928  created: 2016-08-07  expires: never       usage: SCEA
                     trust: ultimate      validity: ultimate
sub  2048R/1327D89C  created: 2016-08-07  expires: never       usage: SEA
[ultimate] (1). Test Asteris (Test signing key) &amp;lt;test@aster.is&amp;gt;
Please note that the shown key validity is not necessarily correct
unless you restart the program.

gpg&amp;gt; quit
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;signing-modules&#34;&gt;Signing modules&lt;/h2&gt;

&lt;p&gt;Now you can start signing modules with the key. The following command will produce a signature file called &lt;code&gt;basic.hcl.asc&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --no-default-keyring --armor --secret-keyring ./test.sec --keyring ./test.pub --output basic.hcl.asc --detach-sig basic.hcl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file should be shipped along side the module so that the converge tool can download it and use it to verify that the module has not been modified after the signature was created.&lt;/p&gt;

&lt;h2 id=&#34;public-keystore&#34;&gt;Public keystore&lt;/h2&gt;

&lt;p&gt;In order to verify a module&amp;rsquo;s signature against its signature file, converge needs access to our public key. This can be exported with the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --no-default-keyring --armor --secret-keyring ./test.sec --keyring ./test.pub --export test@aster.is &amp;gt; pubkeys.gpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we must add the key to the converge&amp;rsquo;s public key database. The following directories make up the default converge keystore layout:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sytem: /usr/lib/converge/trustedkeys/
user: ~/.converge/trustedkeys/
local: $(pwd)/trustedkeys/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The system path is designed to be used by system administrators. The user path is where converge stores keys that are added through the &lt;code&gt;converge key trust&lt;/code&gt; command. Finally, the local path can be used for keys that you do not want stored globally or managed by converge.&lt;/p&gt;

&lt;p&gt;Trusted keys are saved in the desired directory named after the fingerprint of the public key. For global and local keys, we will need to manually create this file.&lt;/p&gt;

&lt;p&gt;We do this by downloading the key, capturing its fingerprint, and storing it in the database using the fingerprint as the filename.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -O https://example.com/pubkeys.gpg

$ gpg --no-default-keyring --with-fingerprint pubkeys.gpg
pub  2048R/475CC928 2016-08-07 Test Asteris (Test signing key) &amp;lt;test@aster.is&amp;gt;
     Key fingerprint = 74FD F669 F18D 59F9 2B0A  ACCD 7203 51FF 475C C928
	 sub  2048R/1327D89C 2016-08-07

$ echo &amp;quot;74FD F669 F18D 59F9 2B0A  ACCD 7203 51FF 475C C928&amp;quot; | tr -d &amp;quot;[:space:]&amp;quot; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;
74fdf669f18d59f92b0aaccd720351ff475cc928

mkdir -p trustedkeys
mv pubkeys.gpg trustedkeys/74fdf669f18d59f92b0aaccd720351ff475cc928
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can disable a key stored in the global system path by creating an empty file in the user or local paths with the same name. Keys stored in the local path will also mask keys in the user path.&lt;/p&gt;

&lt;h2 id=&#34;trusting-keys&#34;&gt;Trusting keys&lt;/h2&gt;

&lt;p&gt;There is an easier way to add a key to the user keystore, using the &lt;code&gt;converge key trust&lt;/code&gt; subcommand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ converge key trust pubkeys.gpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command will ask you to verify that the fingerprint matches the fingerprint you expected for the key.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The gpg key fingerprint is 74fdf669f18d59f92b0aaccd720351ff475cc928
Are you sure you want to trust this key (yes/no)? yes
Trusting key &amp;quot;https://example.com/pubkeys.gpg&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;converge-integration&#34;&gt;Converge integration&lt;/h2&gt;

&lt;p&gt;Now let&amp;rsquo;s walk through the steps converge takes when fetching modules. For now, converge will not attempt to download the detached signature and verify the module. You can enable module verification with the &lt;code&gt;--verify-modules&lt;/code&gt; flag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ converge plan --verify-modules https://example.com/modules/basic.hcl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will result in converge retrieving the following URIs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://example.com/modules/basic.hcl
https://example.com/modules/basic.hcl.asc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then it verifies the signature of the module using the public keys in the key database.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>task.query</title>
      <link>http://converge.aster.is/resources/task-query/</link>
      <pubDate>Thu, 08 Sep 2016 23:26:25 -0700</pubDate>
      
      <guid>http://converge.aster.is/resources/task-query/</guid>
      <description>

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;task.query &amp;quot;hostname&amp;quot; {
  query = &amp;quot;hostname&amp;quot;
}

file.content &amp;quot;hostname data&amp;quot; {
  destination = &amp;quot;hostname.txt&amp;quot;
  content     = &amp;quot;{{lookup `task.query.hostname.status.stdout`}}&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;interpreter&lt;/code&gt; (string)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;query&lt;/code&gt; (string)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;check_flags&lt;/code&gt; (list of strings)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;exec_flags&lt;/code&gt; (list of strings)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;timeout&lt;/code&gt; (duration string)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;dir&lt;/code&gt; (string)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;env&lt;/code&gt; (map of string to string)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>docker.container</title>
      <link>http://converge.aster.is/resources/docker-container/</link>
      <pubDate>Thu, 08 Sep 2016 23:18:03 -0700</pubDate>
      
      <guid>http://converge.aster.is/resources/docker-container/</guid>
      <description>

&lt;p&gt;Container is responsible for creating docker containers. It assumes that
there is already a Docker daemon running on the system.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;docker.container &amp;quot;nginx&amp;quot; {
  name  = &amp;quot;nginx&amp;quot;
  image = &amp;quot;nginx:1.10-alpine&amp;quot;
  force = &amp;quot;true&amp;quot;

  ports = [
    &amp;quot;80&amp;quot;,
  ]

  env {
    &amp;quot;FOO&amp;quot; = &amp;quot;BAR&amp;quot;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;name of the container&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;image&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the image name or ID to use for the container&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;entrypoint&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;override the container entrypoint&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;command&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;override the container command&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;working_dir&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;override the working directory of the container&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;env&lt;/code&gt; (map of string to string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;set environmnet variables in the container&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expose&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;additional ports to expose in the container&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;links&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A list of links for the container. Each link entry should be in the form of
container_name:alias&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ports&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;publish container ports to the host. Each item should be in the following
format:
ip:hostPort:containerPort|ip::containerPort|hostPort:containerPort|containerPort.
Ports can be specified in the format: portnum/proto. If proto is not
specified, &amp;ldquo;tcp&amp;rdquo; is assumed&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dns&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;list of DNS servers for the container to use&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;volumes&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;bind mounts volumes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;volumes_from&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mounts all volumes from the specified container&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;publish_all_ports&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;allocates a random host port for all of a container’s exposed ports.
Specified as a boolean value&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the desired status of the container. running|created&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;force&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;indicates whether or not the container will be recreated if the state is
not what is expected. By default, the module will only check to see if the
container exists. Specified as a boolean value&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>docker.image</title>
      <link>http://converge.aster.is/resources/docker-image/</link>
      <pubDate>Thu, 08 Sep 2016 23:18:03 -0700</pubDate>
      
      <guid>http://converge.aster.is/resources/docker-image/</guid>
      <description>

&lt;p&gt;Image is responsible for pulling Docker images. It assumes that there is
already a Docker daemon running on the system.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;docker.image &amp;quot;busybox&amp;quot; {
  name               = &amp;quot;busybox&amp;quot;
  tag                = &amp;quot;latest&amp;quot;
  inactivity_timeout = &amp;quot;60s&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;name of the image to pull&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tag&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;tag of the image to pull&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inactivity_timeout&lt;/code&gt; (duration_string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the amount of time to wait after a period of inactivity. The timeout is
reset each time new data arrives. The format is Go&amp;rsquo;s duration string. A
duration string is a possibly signed sequence of decimal numbers, each with
optional fraction and a unit suffix, such as &amp;ldquo;300ms&amp;rdquo;, &amp;ldquo;-1.5h&amp;rdquo; or &amp;ldquo;2h45m&amp;rdquo;.
Valid time units are &amp;ldquo;ns&amp;rdquo;, &amp;ldquo;us&amp;rdquo; (or &amp;ldquo;µs&amp;rdquo;), &amp;ldquo;ms&amp;rdquo;, &amp;ldquo;s&amp;rdquo;, &amp;ldquo;m&amp;rdquo;, &amp;ldquo;h&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>module</title>
      <link>http://converge.aster.is/resources/module/</link>
      <pubDate>Thu, 08 Sep 2016 23:18:03 -0700</pubDate>
      
      <guid>http://converge.aster.is/resources/module/</guid>
      <description>

&lt;p&gt;Module remotely sources other modules and adds them to the tree&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;param &amp;quot;message&amp;quot; {
  default = &amp;quot;Hello from another module!&amp;quot;
}

module &amp;quot;basic.hcl&amp;quot; &amp;quot;basic&amp;quot; {
  params = {
    message = &amp;quot;{{param `message`}}&amp;quot;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;params&lt;/code&gt; (map of string to anything)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Params is a map of strings to anything you&amp;rsquo;d like. It will be passed to
the called module as the default values for the &lt;code&gt;param&lt;/code&gt;s there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>param</title>
      <link>http://converge.aster.is/resources/param/</link>
      <pubDate>Thu, 08 Sep 2016 23:18:03 -0700</pubDate>
      
      <guid>http://converge.aster.is/resources/param/</guid>
      <description>

&lt;p&gt;Param controls the flow of values through &lt;code&gt;module&lt;/code&gt; calls. You can use the
&lt;code&gt;{{param &amp;quot;name&amp;quot;}}&lt;/code&gt; template call anywhere you need the value of a param
inside the current module.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;param &amp;quot;message&amp;quot; {
  default = &amp;quot;Hello, World!&amp;quot;
}

param &amp;quot;filename&amp;quot; {
  default = &amp;quot;test.txt&amp;quot;
}

task &amp;quot;render&amp;quot; {
  check = &amp;quot;cat {{param `filename`}} | tee /dev/stderr | grep -q &#39;{{param `message`}}&#39;&amp;quot;
  apply = &amp;quot;echo &#39;{{param `message`}}&#39; &amp;gt; {{param `filename`}}&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt; (optional string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Default is an optional field that provides a default value if none is
provided to this parameter. If this field is not set, this param will be
treated as required.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>file.content</title>
      <link>http://converge.aster.is/resources/file-content/</link>
      <pubDate>Thu, 08 Sep 2016 23:18:02 -0700</pubDate>
      
      <guid>http://converge.aster.is/resources/file-content/</guid>
      <description>

&lt;p&gt;Content renders content to disk&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;param &amp;quot;message&amp;quot; {
  default = &amp;quot;Hello, World in {{param `filename`}}&amp;quot;
}

param &amp;quot;filename&amp;quot; {
  default = &amp;quot;test.txt&amp;quot;
}

file.content &amp;quot;render&amp;quot; {
  destination = &amp;quot;{{param `filename`}}&amp;quot;
  content     = &amp;quot;{{param `message`}}&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Content is the file content. This will be rendered as a template.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Destination is the location on disk where the content will be rendered.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>file.mode</title>
      <link>http://converge.aster.is/resources/file-mode/</link>
      <pubDate>Thu, 08 Sep 2016 23:18:02 -0700</pubDate>
      
      <guid>http://converge.aster.is/resources/file-mode/</guid>
      <description>

&lt;p&gt;Mode monitors the mode of a file&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;param &amp;quot;filename&amp;quot; {
  default = &amp;quot;test.txt&amp;quot;
}

file.mode &amp;quot;render&amp;quot; {
  destination = &amp;quot;{{param `filename`}}&amp;quot;
  mode        = 0777
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Destination specifies which file will be modified by this resource. The
file must exist on the system (for example, having been created with
&lt;code&gt;file.content&lt;/code&gt;.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mode&lt;/code&gt; (octal string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mode is the mode of the file, specified in octal.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Dependencies</title>
      <link>http://converge.aster.is/dependencies/</link>
      <pubDate>Fri, 09 Sep 2016 00:13:59 -0500</pubDate>
      
      <guid>http://converge.aster.is/dependencies/</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;http://converge.aster.is/getting-started/&#34;&gt;getting started guide&lt;/a&gt; we talked about
dependencies, and briefly mentioned that they&amp;rsquo;re &lt;em&gt;super important&lt;/em&gt; for Converge
to work properly. But we didn&amp;rsquo;t really go into them there&amp;hellip; so here we
are!&lt;/p&gt;

&lt;h2 id=&#34;graph-walking&#34;&gt;Graph Walking&lt;/h2&gt;

&lt;p&gt;Briefly, Converge operates by thinking about your deployment as a graph of tasks
that need to be done. It walks around the graph from the leaves (AKA tasks with
no dependencies) all the way to to the root (AKA Rome, where all roads lead.)
Let&amp;rsquo;s explore what that means with one of our graphs from before:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://converge.aster.is/images/getting-started/hello-world-params.png&#34; alt=&#34;A graph with a parameter. The file hello.txt depends on the name parameter.&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        A graph with a parameter. The file hello.txt depends on the name parameter.
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;What does Converge do when you ask it to apply this graph? When Converge loads
this file, it will load then file and then start walking at the node that
doesn&amp;rsquo;t have any dependencies. In this case, that&amp;rsquo;s &lt;code&gt;param.name = &amp;quot;World&amp;quot;&lt;/code&gt;. When
&lt;code&gt;param.name&lt;/code&gt; has been successfully walked, it will move on to &lt;code&gt;File: hello.txt&lt;/code&gt;.
If we&amp;rsquo;re successful, the root (&lt;code&gt;/&lt;/code&gt;) will be marked as successful, and our graph
will be successful. Neat!&lt;/p&gt;

&lt;h2 id=&#34;the-graph-command&#34;&gt;The Graph Command&lt;/h2&gt;

&lt;p&gt;All the graphs we&amp;rsquo;ve been seeing so far have just been the output of Converge&amp;rsquo;s
&lt;code&gt;graph&lt;/code&gt; command. When asked, Converge will load up any modules you specify and
then render them as &lt;a href=&#34;http://graphviz.org/&#34;&gt;Graphviz&lt;/a&gt; dot output. You can render
that like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ converge graph --local yourModule.hcl | dot -Tpng &amp;gt; yourModule.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you&amp;rsquo;re developing modules, make a habit of rendering them as graphs. It
makes it easier to think about how the graph will be executed.&lt;/p&gt;

&lt;h2 id=&#34;cross-node-references&#34;&gt;Cross-Node References&lt;/h2&gt;

&lt;p&gt;Resources may references one-another as long as the references do not introduce
circular dependencies.  When creating a reference from one node to another we
can use the &lt;code&gt;lookup&lt;/code&gt; command to reference fields of an entry that are provided
by that entries module.  The available fields will vary depending on the module
and should be documented along with each module.  The example below illustrates
using &lt;code&gt;lookup&lt;/code&gt; to access fields from a &lt;code&gt;docker.image&lt;/code&gt; node from within
&lt;code&gt;docker.container&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;docker.image &amp;quot;nginx&amp;quot; {
  name    = &amp;quot;nginx&amp;quot;
  tag     = &amp;quot;1.10-alpine&amp;quot;
  timeout = &amp;quot;60s&amp;quot;
}

docker.container &amp;quot;nginx&amp;quot; {
  name  = &amp;quot;nginx-server&amp;quot;
  image = &amp;quot;{{lookup `docker.image.nginx.name`}}:{{lookup `docker.image.nginx.tag`}}&amp;quot;
  force = &amp;quot;true&amp;quot;
  expose = [
    &amp;quot;80&amp;quot;,
    &amp;quot;443/tcp&amp;quot;,
    &amp;quot;8080&amp;quot;,
  ]
  publish_all_ports = &amp;quot;false&amp;quot;
  ports = [
    &amp;quot;80&amp;quot;,
  ]
  env {
    &amp;quot;FOO&amp;quot; = &amp;quot;BAR&amp;quot;
  }
  dns = [&amp;quot;8.8.8.8&amp;quot;, &amp;quot;8.8.4.4&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see, lookup syntax resembles that of parameters and add implicit
dependencies between nodes.&lt;/p&gt;

&lt;h2 id=&#34;explicit-dependencies&#34;&gt;Explicit Dependencies&lt;/h2&gt;

&lt;p&gt;When we&amp;rsquo;re walking our graph, there are a lot of operations that can be done in
parallel. For this to work, you will need to specify dependencies between
resources in the same file. Let&amp;rsquo;s take the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;task &amp;quot;names&amp;quot; {
  check = &amp;quot;test -d names&amp;quot;
  apply = &amp;quot;mkdir names&amp;quot;
}

file.content &amp;quot;hello&amp;quot; {
  destination = &amp;quot;names/hello.txt&amp;quot;
  content     = &amp;quot;Hello, World!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a human reading this, we can clearly see that &lt;code&gt;file.content.hello&lt;/code&gt; is
dependent on &lt;code&gt;task.names&lt;/code&gt;, because the file needs the directory to be created
before it can write files into it. But Converge doesn&amp;rsquo;t know that yet, so here&amp;rsquo;s
how it looks:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://converge.aster.is/images/dependencies/without-depends.png&#34; alt=&#34;The graph output of the above module. Converge hasn&amp;#39;t connected the directory and file.&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        The graph output of the above module. Converge hasn&amp;#39;t connected the directory and file.
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;To fix this, we&amp;rsquo;ll need to specify &lt;code&gt;depends&lt;/code&gt; on our &lt;code&gt;file.content&lt;/code&gt;. &lt;code&gt;depends&lt;/code&gt; is
a list of resources in the current module that must be successfully walked
before walking ours. They&amp;rsquo;re specified as the resource type, a dot, then the
resource name. So &lt;code&gt;task &amp;quot;names&amp;quot;&lt;/code&gt; above becomes &lt;code&gt;task.names&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;task &amp;quot;names&amp;quot; {
  check = &amp;quot;test -d names&amp;quot;
  apply = &amp;quot;mkdir names&amp;quot;
}

file.content &amp;quot;hello&amp;quot; {
  destination = &amp;quot;names/hello.txt&amp;quot;
  content     = &amp;quot;Hello, World!&amp;quot;

  depends = [&amp;quot;task.names&amp;quot;] # added in the resource that needs the dependency
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Converge correctly sees that it needs to walk &lt;code&gt;task.names&lt;/code&gt; before
&lt;code&gt;file.content.hello&lt;/code&gt;:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://converge.aster.is/images/dependencies/with-depends.png&#34; alt=&#34;The graph output of the above module. Converge now sees the dependency between the directory and the file.&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        The graph output of the above module. Converge now sees the dependency between the directory and the file.
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Future Improvements&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re working hard on making Converge better at detecting situations like this
automatically. Ideally, you wouldn&amp;rsquo;t have to specify dependencies at all, and it
would all work like &lt;a href=&#34;http://converge.aster.is/getting-started/#params&#34;&gt;the param example in the getting started guide&lt;/a&gt;. We&amp;rsquo;re not quite there yet, but keep an eye
out!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>task</title>
      <link>http://converge.aster.is/resources/task/</link>
      <pubDate>Wed, 31 Aug 2016 09:51:20 -0500</pubDate>
      
      <guid>http://converge.aster.is/resources/task/</guid>
      <description>

&lt;p&gt;Task allows you to run arbitrary shell commands on your system, first
checking if the command should be run.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;param &amp;quot;message&amp;quot; {
  default = &amp;quot;Hello, World!&amp;quot;
}

param &amp;quot;filename&amp;quot; {
  default = &amp;quot;test.txt&amp;quot;
}

task &amp;quot;render&amp;quot; {
  check = &amp;quot;cat {{param `filename`}} | tee /dev/stderr | grep -q &#39;{{param `message`}}&#39;&amp;quot;
  apply = &amp;quot;echo &#39;{{param `message`}}&#39; &amp;gt; {{param `filename`}}&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;interpreter&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the shell interpreter that will be used for your scripts. &lt;code&gt;/bin/sh&lt;/code&gt; is
used by default.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;check_flags&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;flags to pass to the &lt;code&gt;interpreter&lt;/code&gt; binary to check validity. For
&lt;code&gt;/bin/sh&lt;/code&gt; this is &lt;code&gt;-n&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exec_flags&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;flags to pass to the interpreter at execution time&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;check&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the script to run to check if a resource needs to be changed. It should
exit with exit code 0 if the resource does not need to be changed, and
1 (or above) otherwise.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apply&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the script to run to apply the resource. Normal shell exit code
expectations apply (that is, exit code 0 for success, 1 or above for
failure.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; (duration string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the amount of time the command will wait before halting forcefully. The
format is Go&amp;rsquo;s duraction string. A duration string is a possibly signed
sequence of decimal numbers, each with optional fraction and a unit
suffix, such as &amp;ldquo;300ms&amp;rdquo;, &amp;ldquo;-1.5h&amp;rdquo; or &amp;ldquo;2h45m&amp;rdquo;. Valid time units are &amp;ldquo;ns&amp;rdquo;,
&amp;ldquo;us&amp;rdquo; (or &amp;ldquo;µs&amp;rdquo;), &amp;ldquo;ms&amp;rdquo;, &amp;ldquo;s&amp;rdquo;, &amp;ldquo;m&amp;rdquo;, &amp;ldquo;h&amp;rdquo;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dir&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the working directory this command should be run in&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;env&lt;/code&gt; (map of string to string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;any environment variables that should be passed to the command&lt;/p&gt;

&lt;h2 id=&#34;exported-fields&#34;&gt;Exported Fields&lt;/h2&gt;

&lt;p&gt;The following fields are available from other modules via &lt;code&gt;lookup&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;checkStmt&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the script that will be executed during planning.  It is the script provided
  to &lt;code&gt;check&lt;/code&gt; with any template references resolved.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;applyStmt&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the script that will be executed during application.  It is the script
  provided to &lt;code&gt;apply&lt;/code&gt; with any template references resolved.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dir&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the working directory of the script.  It will be an empty string if unset.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;env&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;a list of environment variables passed into the script with &lt;code&gt;env&lt;/code&gt; in the form
  of &lt;code&gt;key=value&lt;/code&gt;. If no environment variables were set then it returns an empty
  list.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt; (command results)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the execution status of the last task that was run.  During planning this will
  be the result of &lt;code&gt;check&lt;/code&gt;, and during application it will be the result of
  &lt;code&gt;apply&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;checkStatus&lt;/code&gt; (command results)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the status of the initial &lt;code&gt;check&lt;/code&gt; run.  During planning this is equivivlent to
  &lt;code&gt;status&lt;/code&gt;, during application this will provide access to the results of the
  initial call to &lt;code&gt;check&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;command-results&#34;&gt;Command Results&lt;/h3&gt;

&lt;p&gt;The command results structure provides fields related to the execution status of
a task.  &lt;code&gt;Status&lt;/code&gt; and &lt;code&gt;CheckStatus&lt;/code&gt; both return command results type fields that
allow you to access any of these defined fields.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exitStatus&lt;/code&gt; (unsigned integer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the exit code of the process. The meaning of the fields is system dependent.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stdout&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;contains all data written to stdout by the process.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stderr&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;contains all data written to stderr by the process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://converge.aster.is/configuration/</link>
      <pubDate>Mon, 29 Aug 2016 16:51:52 -0500</pubDate>
      
      <guid>http://converge.aster.is/configuration/</guid>
      <description>

&lt;p&gt;Converge sources configuration from a number of different places:&lt;/p&gt;

&lt;h2 id=&#34;command-line-flags&#34;&gt;Command-Line Flags&lt;/h2&gt;

&lt;p&gt;Command-line flags will always be considered over any other source. To view
them, send &lt;code&gt;--help&lt;/code&gt; to any command. In addition, all commands have these flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--config&lt;/code&gt;: set the config file (see below for more info on this file)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--log-level&lt;/code&gt;: log level, one of &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, or &lt;code&gt;FATAL&lt;/code&gt;
(&lt;code&gt;INFO&lt;/code&gt; is used by default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--nocolor&lt;/code&gt;: set to force colorless output&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;environment&#34;&gt;Environment&lt;/h2&gt;

&lt;p&gt;Environment variables are the same names as command-line flags, but prefixed by
&lt;code&gt;CONVERGE_&lt;/code&gt; and with dashes replaced with underscores. For example, the
&lt;code&gt;--log-level&lt;/code&gt; flag can be set by setting the &lt;code&gt;CONVERGE_LOG_LEVEL&lt;/code&gt; environment
variable.&lt;/p&gt;

&lt;h2 id=&#34;config-files&#34;&gt;Config Files&lt;/h2&gt;

&lt;p&gt;Converge will source a single config file as a fallback. This config file can
JSON, TOML, YAML, HCL, or a Java properties file (this is detected by file
extension.) The keys of this file are the same as the command-line flags.
Converge looks in &lt;code&gt;/etc/converge/config.{ext}&lt;/code&gt; by default, but you can change
this with the global &lt;code&gt;--config&lt;/code&gt; flag.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Server</title>
      <link>http://converge.aster.is/server/</link>
      <pubDate>Mon, 29 Aug 2016 16:49:53 -0500</pubDate>
      
      <guid>http://converge.aster.is/server/</guid>
      <description>

&lt;p&gt;Converge comes with a server that can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run &lt;code&gt;plan&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; and stream the results (using
&lt;a href=&#34;http://www.grpc.io/&#34;&gt;gRPC&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;serve modules from a given root&lt;/li&gt;
&lt;li&gt;serve the Converge binary itself, for bootstrapping new systems inside your
network&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;https&#34;&gt;HTTPS&lt;/h2&gt;

&lt;p&gt;You can run the server over HTTPS. If you don&amp;rsquo;t have your own certificates, you
can use &lt;a href=&#34;https://github.com/square/certstrap&#34;&gt;certstrap&lt;/a&gt; to get some with the
following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ certstrap init --common-name your-company
$ certstrap request-cert --ip 127.0.0.1
$ certstrap sign 127.0.0.1 --CA your-company
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, replace &lt;code&gt;your-company&lt;/code&gt; and &lt;code&gt;127.0.0.1&lt;/code&gt; with your company&amp;rsquo;s name and
the your server&amp;rsquo;s IP address, respectively (but those defaults will work fine
for trying it out locally.) The certificates will be placed in &lt;code&gt;out&lt;/code&gt; in the
directory you run the command from.&lt;/p&gt;

&lt;p&gt;Afterwards, reference these files like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;converge server --cert-file out/127.0.0.1.crt \
                --key-file out/127.0.0.1.crt \
                --ca-file out/your-company.crt \
                --use-ssl \
                --rpc-token your-token
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll also need to pass the &lt;code&gt;--ca-file&lt;/code&gt; flag to commands like &lt;code&gt;plan&lt;/code&gt; and
&lt;code&gt;apply&lt;/code&gt;, in order to trust your new CA (or put it in the system roots.)&lt;/p&gt;

&lt;h2 id=&#34;apis&#34;&gt;APIs&lt;/h2&gt;

&lt;p&gt;Using the Converge command-line interface is good enough for most cases. If you
want to integrate Converge into your system in novel ways, however, an API is
available.&lt;/p&gt;

&lt;h3 id=&#34;authentication&#34;&gt;Authentication&lt;/h3&gt;

&lt;p&gt;Authentication happens with &lt;a href=&#34;https://jwt.io/&#34;&gt;JSON Web Tokens&lt;/a&gt;. The only
currently supported algorithm is HS512, and issued tokens must have a 30 second
expiration. Tokens are set using the &lt;code&gt;--rpc-token&lt;/code&gt; &lt;a href=&#34;http://converge.aster.is/configuration/&#34;&gt;configuration flag&lt;/a&gt; to all subcommands that use the API.&lt;/p&gt;

&lt;h3 id=&#34;http-2-0-and-grpc&#34;&gt;HTTP/2.0 And gRPC&lt;/h3&gt;

&lt;p&gt;If you want to create your own client for Converge, you&amp;rsquo;ll probably want to use
gRPC. You can get instructions for your chosen langauge in
&lt;a href=&#34;http://www.grpc.io/docs/&#34;&gt;the gRPC docs&lt;/a&gt;, and the protobuf file is
&lt;code&gt;rpc/pb/root.proto&lt;/code&gt; in the Converge source. If you&amp;rsquo;re using Go, the client
implementations in &lt;code&gt;rpc/client.go&lt;/code&gt; are your friends.&lt;/p&gt;

&lt;p&gt;When using the RPC interface, the JWT token should be sent in the request
metadata&amp;rsquo;s &lt;code&gt;authorization&lt;/code&gt; field with the prefix &lt;code&gt;BEARER&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;http-1-1-and-json&#34;&gt;HTTP/1.1 And JSON&lt;/h3&gt;

&lt;p&gt;A pseudo-RESTful interface is available to do the same things the gRPC interface
can do. See the protobuf file for the most up-to-date endpoints and payload
information.&lt;/p&gt;

&lt;p&gt;When using the HTTP/1.1 interface, the JWT token should be sent in the
&lt;code&gt;Authorization&lt;/code&gt; header with the prefix &lt;code&gt;BEARER&lt;/code&gt;. You can also set the &lt;code&gt;jwt&lt;/code&gt;
querystring var, or send it in the &lt;code&gt;jwt&lt;/code&gt; cookie.&lt;/p&gt;

&lt;h2 id=&#34;standalone-server-for-the-command-line&#34;&gt;Standalone Server For The Command-Line&lt;/h2&gt;

&lt;p&gt;The main Converge commands (like &lt;code&gt;plan&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;) will take a &lt;code&gt;--local&lt;/code&gt;
argument (or set &lt;code&gt;CONVERGE_LOCAL=1&lt;/code&gt;.) This will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start a local RPC server&lt;/li&gt;
&lt;li&gt;Perform the requested action against the RPC server&lt;/li&gt;
&lt;li&gt;Shut down the RPC server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;During this process, a port (&lt;code&gt;localhost:26930&lt;/code&gt;) will be opened and RPC will be
running on it. This interface will be protected with an randomly-generated
token, unless you specify &lt;code&gt;--no-token&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Don&amp;#39;t Disable Tokens&lt;/p&gt;
&lt;p&gt;Please don&amp;rsquo;t disable token generation with &lt;code&gt;--no-token&lt;/code&gt;. I know we just said you
can, but don&amp;rsquo;t do it. This will open up remote execution of arbitrary
instructions to whoever can reach that port. You can make this process &lt;em&gt;more&lt;/em&gt;
secure by specifying &lt;code&gt;--cert-file&lt;/code&gt;, &lt;code&gt;--key-file&lt;/code&gt;, and optionally &lt;code&gt;--ca-file&lt;/code&gt; to
connect over HTTPS.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>