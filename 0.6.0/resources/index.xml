<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Resources-rsses on Converge</title>
    <link>http://converge.aster.is/0.6.0/resources/index.xml</link>
    <description>Recent content in Resources-rsses on Converge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the Apache 2.0 license</copyright>
    <lastBuildDate>Fri, 03 Mar 2017 10:23:30 -0600</lastBuildDate>
    <atom:link href="http://converge.aster.is/0.6.0/resources/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>docker.network</title>
      <link>http://converge.aster.is/0.6.0/resources/docker-network/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/docker-network/</guid>
      <description>

&lt;p&gt;Network is responsible for managing Docker networks. It assumes that there is
already a Docker daemon running on the system.
&lt;em&gt;Note: docker resources are not currently supported on Solaris.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;/* docker resources are currently not supported on solaris */
docker.network &amp;quot;test-network&amp;quot; {
  name  = &amp;quot;test-network&amp;quot;
  state = &amp;quot;present&amp;quot;
  force = true

  labels {
    environment = &amp;quot;test&amp;quot;
  }

  options {
    &amp;quot;com.docker.network.bridge.enable_icc&amp;quot; = &amp;quot;true&amp;quot;
  }

  internal    = false
  ipv6        = false
  ipam_driver = &amp;quot;default&amp;quot;

  ipam_config {
    subnet  = &amp;quot;192.168.129.0/24&amp;quot;
    gateway = &amp;quot;192.168.129.1&amp;quot;

    aux_addresses {
      router  = &amp;quot;192.168.129.40&amp;quot;
      printer = &amp;quot;192.168.129.41&amp;quot;
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;name of the network&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;driver&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;network driver. default: bridge&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;labels&lt;/code&gt; (map of string to string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;labels to set on the network&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt; (map of string to anything)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;driver specific options&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ipam_driver&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ip address management driver. default: default&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ipam_config&lt;/code&gt; (list of ipamConfigMaps)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;optional custom IPAM configuration. multiple IPAM configurations are
permitted. Each IPAM configuration block should contain one or more of the
following items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;subnet:      subnet in CIDR format&lt;/li&gt;
&lt;li&gt;gateway:     ipv4 or ipv6 gateway for the corresponding subnet&lt;/li&gt;
&lt;li&gt;ip_range:    container ips are allocated from this sub-ranges (CIDR format)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;aux_address: auxiliary ipv4 or ipv6 addresses used by the network driver.
             Aux addresses are specified as a map with a name key and an IP
             address value&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;internal&lt;/code&gt; (bool)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;restricts external access to the network&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ipv6&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;enable ipv6 networking&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;state&lt;/code&gt; (State)&lt;/p&gt;

&lt;p&gt;Valid values: &lt;code&gt;present&lt;/code&gt; and &lt;code&gt;absent&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;indicates whether the network should exist. default: present&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;force&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;indicates whether or not the network will be recreated if the state is not
what is expected. By default, the module will only check to see if the
network exists. Specified as a boolean value&lt;/p&gt;

&lt;h2 id=&#34;exported-fields&#34;&gt;Exported Fields&lt;/h2&gt;

&lt;p&gt;Here are the fields that are exported for use with &amp;lsquo;lookup&amp;rsquo;.  Re-exported fields
will have their own fields exported under the re-exported namespace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;name of the network&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;driver&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;network drive configured in the hcl&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;labels&lt;/code&gt; (map of string to string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;labels set on the network&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt; (map of string to anything)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;driver-specific options that have been configured&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ipam&lt;/code&gt; (dc.IPAMOptions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;docker client IPAM options&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;internal&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;restricted to internal networking&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ipv6&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;uses ipv6&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;state&lt;/code&gt; (State)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the configured state&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;force&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;true if &amp;lsquo;force&amp;rsquo; was specified in the hcl&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>file.content</title>
      <link>http://converge.aster.is/0.6.0/resources/file-content/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/file-content/</guid>
      <description>

&lt;p&gt;Content renders content to disk&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;param &amp;quot;message&amp;quot; {
  default = &amp;quot;Hello, World in {{param `filename`}}&amp;quot;
}

param &amp;quot;filename&amp;quot; {
  default = &amp;quot;test.txt&amp;quot;
}

file.content &amp;quot;render&amp;quot; {
  destination = &amp;quot;{{param `filename`}}&amp;quot;
  content     = &amp;quot;{{param `message`}}&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Content is the file content. This will be rendered as a template.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Destination is the location on disk where the content will be rendered.&lt;/p&gt;

&lt;h2 id=&#34;exported-fields&#34;&gt;Exported Fields&lt;/h2&gt;

&lt;p&gt;Here are the fields that are exported for use with &amp;lsquo;lookup&amp;rsquo;.  Re-exported fields
will have their own fields exported under the re-exported namespace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;configured content of the file&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;configured destination of the file&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>file.directory</title>
      <link>http://converge.aster.is/0.6.0/resources/file-directory/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/file-directory/</guid>
      <description>

&lt;p&gt;Directory makes sure a directory is present on disk&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;# file.directory will create or ensure a directory is present
file.directory &amp;quot;hello&amp;quot; {
  destination = &amp;quot;hello&amp;quot;
}

# it can also accept a &amp;quot;create_all&amp;quot; parameter to do the equivalent of &amp;quot;mkdir -p&amp;quot;
file.directory &amp;quot;deeper&amp;quot; {
  destination = &amp;quot;deeper/a/b/c&amp;quot;
  create_all  = true
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the location on disk to make the directory&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;create_all&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;whether or not to create all parent directories on the way up&lt;/p&gt;

&lt;h2 id=&#34;exported-fields&#34;&gt;Exported Fields&lt;/h2&gt;

&lt;p&gt;Here are the fields that are exported for use with &amp;lsquo;lookup&amp;rsquo;.  Re-exported fields
will have their own fields exported under the re-exported namespace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;directory path&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createall&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;if true, directories will be created recursively&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>file.fetch</title>
      <link>http://converge.aster.is/0.6.0/resources/file-fetch/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/file-fetch/</guid>
      <description>

&lt;p&gt;Fetch is responsible for fetching files&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;# fetch files
file.fetch &amp;quot;consul.zip&amp;quot; {
  source      = &amp;quot;https://releases.hashicorp.com/consul/0.6.4/consul_0.6.4_linux_amd64.zip&amp;quot;
  destination = &amp;quot;/tmp/consul.zip&amp;quot;
  hash_type   = &amp;quot;sha256&amp;quot;
  hash        = &amp;quot;abdf0e1856292468e2c9971420d73b805e93888e006c76324ae39416edcf0627&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source is the location of the file to fetch&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Destination for the fetched file&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hash_type&lt;/code&gt; (optional string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HashType is the hash function used to generate the checksum hash
Valid types are md5, sha1, sha256, and sha512&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hash&lt;/code&gt; (optional string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hash is the checksum hash&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;force&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Force indicates whether the file will be fetched if it already exists
If true, the file will be fetched if:
1. no checksum is provided
2. the checksum of the existing file differs from the checksum provided&lt;/p&gt;

&lt;h2 id=&#34;exported-fields&#34;&gt;Exported Fields&lt;/h2&gt;

&lt;p&gt;Here are the fields that are exported for use with &amp;lsquo;lookup&amp;rsquo;.  Re-exported fields
will have their own fields exported under the re-exported namespace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;location of the file to fetch&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;destination for the fetched file&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hash_type&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;hash function used to generate the checksum hash; value is available for
lookup if set in the hcl&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hash&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the checksum hash; value is available for lookup if set in the hcl&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;force&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;whether the file will be fetched if it already exists&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>file.mode</title>
      <link>http://converge.aster.is/0.6.0/resources/file-mode/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/file-mode/</guid>
      <description>

&lt;p&gt;Mode monitors the mode of a file&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;param &amp;quot;filename&amp;quot; {
  default = &amp;quot;test.txt&amp;quot;
}

file.mode &amp;quot;render&amp;quot; {
  destination = &amp;quot;{{param `filename`}}&amp;quot;
  mode        = 0777
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Destination specifies which file will be modified by this resource. The
file must exist on the system (for example, having been created with
&lt;code&gt;file.content&lt;/code&gt;.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mode&lt;/code&gt; (required base 8 optional uint32)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mode is the mode of the file, specified in octal.&lt;/p&gt;

&lt;h2 id=&#34;exported-fields&#34;&gt;Exported Fields&lt;/h2&gt;

&lt;p&gt;Here are the fields that are exported for use with &amp;lsquo;lookup&amp;rsquo;.  Re-exported fields
will have their own fields exported under the re-exported namespace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;path to the file that will be modified&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mode&lt;/code&gt; (os.FileMode)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the mode that the file or directory should be configured with&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>file.owner</title>
      <link>http://converge.aster.is/0.6.0/resources/file-owner/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/file-owner/</guid>
      <description>

&lt;p&gt;Owner sets the file and group ownership of a file or directory.  If
&lt;code&gt;recursive&lt;/code&gt; is set to true and &lt;code&gt;destination&lt;/code&gt; is a directory, then it will
also recursively change ownership of all files and subdirectories.  Symlinks
are ignored.  If the file or directory does not exist during the plan phase
of application the differences will be calculated during application.
Otherwise changes will be limited to the files identified during the plan
phase of application.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;/* This file demonstrates proper usage of the file.owner module by creating a
 new file, then changing the ownership of that file to a different group. */

file.content &amp;quot;to-change&amp;quot; {
  destination = &amp;quot;tochange&amp;quot;
}

task.query &amp;quot;existing-group&amp;quot; {
  interpreter = &amp;quot;/bin/bash&amp;quot;
  query       = &amp;quot;echo -n $(ls -la {{lookup `file.content.to-change.destination`}} | awk &#39;{print $4}&#39;)&amp;quot;
}

task.query &amp;quot;new-group&amp;quot; {
  interpreter = &amp;quot;/bin/bash&amp;quot;
  query       = &amp;quot;echo -n $(groups | xargs -n 1 echo | grep -v $(whoami) | grep -v {{lookup `task.query.existing-group.status.stdout`}} | head -n1)&amp;quot;
}

file.owner &amp;quot;owner-test&amp;quot; {
  destination = &amp;quot;{{lookup `file.content.to-change.destination`}}&amp;quot;
  group       = &amp;quot;{{lookup `task.query.new-group.status.stdout`}}&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Destination is the location on disk where the content will be rendered.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;recursive&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recursive indicates whether ownership changes should be applied
recursively.  Symlinks are not followed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Username specifies user-owernship by user name&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;uid&lt;/code&gt; (optional int)&lt;/p&gt;

&lt;p&gt;Only one of &lt;code&gt;user&lt;/code&gt; or &lt;code&gt;uid&lt;/code&gt; may be set.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UID specifies user-ownership by UID&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;group&lt;/code&gt; (string)&lt;/p&gt;

&lt;p&gt;Only one of &lt;code&gt;group&lt;/code&gt; or &lt;code&gt;gid&lt;/code&gt; may be set.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Groupname specifies group-ownership by groupname&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;gid&lt;/code&gt; (optional int)&lt;/p&gt;

&lt;p&gt;Only one of &lt;code&gt;group&lt;/code&gt; or &lt;code&gt;gid&lt;/code&gt; may be set.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GID specifies group ownership by gid&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;verbose&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Verbose specifies that when performing recursive updates, a diff should be
shown for each file to be changed&lt;/p&gt;

&lt;h2 id=&#34;exported-fields&#34;&gt;Exported Fields&lt;/h2&gt;

&lt;p&gt;Here are the fields that are exported for use with &amp;lsquo;lookup&amp;rsquo;.  Re-exported fields
will have their own fields exported under the re-exported namespace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the path to the file that should change; or if &lt;code&gt;recursive&lt;/code&gt; is set, the path
to the root of the filesystem to recursively change.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the username of the user that should be given ownership of the file&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uid&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the uid of the user that should be given ownership of the file&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;group&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the group name of the group that should be given ownership of the file&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gid&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the gid of the group that should be given ownership of the file&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;recursive&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;if true, and &lt;code&gt;destination&lt;/code&gt; is a directory, apply changes recursively&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>filesystem</title>
      <link>http://converge.aster.is/0.6.0/resources/filesystem/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/filesystem/</guid>
      <description>

&lt;p&gt;Filesystem do formatting and mounting for LVM volumes
(also capable to format usual block devices as well)&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;param &amp;quot;device&amp;quot; {
  default = &amp;quot;/dev/loop0&amp;quot;
}

lvm.volumegroup &amp;quot;vg-test&amp;quot; {
  name    = &amp;quot;test&amp;quot;
  devices = [&amp;quot;{{ param `device` }}&amp;quot;]
}

lvm.logicalvolume &amp;quot;lv-test&amp;quot; {
  group   = &amp;quot;test&amp;quot;
  name    = &amp;quot;test&amp;quot;
  size    = &amp;quot;1G&amp;quot;
  depends = [&amp;quot;lvm.volumegroup.vg-test&amp;quot;]
}

filesystem &amp;quot;mnt-me&amp;quot; {
  device  = &amp;quot;/dev/mapper/test-test&amp;quot;
  mount   = &amp;quot;/mnt&amp;quot;
  fstype  = &amp;quot;ext3&amp;quot;
  depends = [&amp;quot;lvm.logicalvolume.lv-test&amp;quot;]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;device&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Device path to be mount
Examples: &lt;code&gt;/dev/sda1&lt;/code&gt;, &lt;code&gt;/dev/mapper/vg0-data&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mount&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mountpoint where device will be mounted
(should be an existing directory)
Example: /mnt/data&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fstype&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fstype is filesystem type
(actually any linux filesystem, except &lt;code&gt;ZFS&lt;/code&gt;)
Example:  &lt;code&gt;ext4&lt;/code&gt;, &lt;code&gt;xfs&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requiredBy&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RequiredBy is a list of dependencies, to pass to systemd .mount unit&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wantedBy&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WantedBy is a list of dependencies, to pass to systemd .mount unit&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;before&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before is a list of dependencies, to pass to systemd .mount unit&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>lvm.logicalvolume</title>
      <link>http://converge.aster.is/0.6.0/resources/lvm-logicalvolume/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/lvm-logicalvolume/</guid>
      <description>

&lt;p&gt;Logical volume creation&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;param &amp;quot;device&amp;quot; {
  default = &amp;quot;/dev/loop0&amp;quot;
}

lvm.volumegroup &amp;quot;vg-test&amp;quot; {
  name    = &amp;quot;test&amp;quot;
  devices = [&amp;quot;{{ param `device` }}&amp;quot;]
}

lvm.logicalvolume &amp;quot;lv-test&amp;quot; {
  group   = &amp;quot;test&amp;quot;
  name    = &amp;quot;test&amp;quot;
  size    = &amp;quot;1G&amp;quot;
  depends = [&amp;quot;lvm.volumegroup.vg-test&amp;quot;]
}

filesystem &amp;quot;mnt-me&amp;quot; {
  device  = &amp;quot;/dev/mapper/test-test&amp;quot;
  mount   = &amp;quot;/mnt&amp;quot;
  fstype  = &amp;quot;ext3&amp;quot;
  depends = [&amp;quot;lvm.logicalvolume.lv-test&amp;quot;]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;group&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Group where volume will be created&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Name of volume, which will be created&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Size of volume. Can be relative or absolute.
Relative size set in forms like &lt;code&gt;100%FREE&lt;/code&gt;
(words after percent sign can be &lt;code&gt;FREE&lt;/code&gt;, &lt;code&gt;VG&lt;/code&gt;, &lt;code&gt;PV&lt;/code&gt;)
Absolute size specified with suffix &lt;code&gt;BbKkMmGgTtPp&lt;/code&gt;, upper case
suffix mean S.I. sizes (power of 10), lower case mean powers of 1024.
Also special suffixes &lt;code&gt;Ss&lt;/code&gt;, which mean sectors.
Refer to LVM manpages for details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>lvm.volumegroup</title>
      <link>http://converge.aster.is/0.6.0/resources/lvm-volumegroup/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/lvm-volumegroup/</guid>
      <description>

&lt;p&gt;Volume group is responsible for creation LVM Volume Groups
from given block devices.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;param &amp;quot;device&amp;quot; {
  default = &amp;quot;/dev/loop0&amp;quot;
}

lvm.volumegroup &amp;quot;vg-test&amp;quot; {
  name    = &amp;quot;test&amp;quot;
  devices = [&amp;quot;{{ param `device` }}&amp;quot;]
}

lvm.logicalvolume &amp;quot;lv-test&amp;quot; {
  group   = &amp;quot;test&amp;quot;
  name    = &amp;quot;test&amp;quot;
  size    = &amp;quot;1G&amp;quot;
  depends = [&amp;quot;lvm.volumegroup.vg-test&amp;quot;]
}

filesystem &amp;quot;mnt-me&amp;quot; {
  device  = &amp;quot;/dev/mapper/test-test&amp;quot;
  mount   = &amp;quot;/mnt&amp;quot;
  fstype  = &amp;quot;ext3&amp;quot;
  depends = [&amp;quot;lvm.logicalvolume.lv-test&amp;quot;]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Name of created volume group&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;devices&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Devices is list of entities to include into volume group&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;remove&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remove is enable removal devices omitted from &lt;code&gt;Devices&lt;/code&gt; list from
from volume group&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;forceRemove&lt;/code&gt; (bool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ForceRemove control destruction of volumes after removing
from volume group&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>module</title>
      <link>http://converge.aster.is/0.6.0/resources/module/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/module/</guid>
      <description>

&lt;p&gt;Module remotely sources other modules and adds them to the tree&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;param &amp;quot;message&amp;quot; {
  default = &amp;quot;Hello from another module!&amp;quot;
}

module &amp;quot;basic.hcl&amp;quot; &amp;quot;basic&amp;quot; {
  params = {
    message = &amp;quot;{{param `message`}}&amp;quot;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;params&lt;/code&gt; (map of string to anything)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Params is a map of strings to anything you&amp;rsquo;d like. It will be passed to
the called module as the default values for the &lt;code&gt;param&lt;/code&gt;s there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>package.apt</title>
      <link>http://converge.aster.is/0.6.0/resources/package-apt/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/package-apt/</guid>
      <description>

&lt;p&gt;Apt Package manages system packages with &lt;code&gt;apt&lt;/code&gt; and &lt;code&gt;dpkg&lt;/code&gt;. It assumes that
both &lt;code&gt;apt&lt;/code&gt; and &lt;code&gt;dpkg&lt;/code&gt; are installed on the system, and that the user has
permissions to install, remove, and query packages.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;package.apt &amp;quot;mc&amp;quot; {
  name  = &amp;quot;mc&amp;quot;
  state = &amp;quot;present&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Name of the package or package group.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;state&lt;/code&gt; (State)&lt;/p&gt;

&lt;p&gt;Valid values: &lt;code&gt;present&lt;/code&gt; and &lt;code&gt;absent&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;State of the package. Present means the package will be installed if
missing; Absent means the package will be uninstalled if present.&lt;/p&gt;

&lt;h2 id=&#34;exported-fields&#34;&gt;Exported Fields&lt;/h2&gt;

&lt;p&gt;Here are the fields that are exported for use with &amp;lsquo;lookup&amp;rsquo;.  Re-exported fields
will have their own fields exported under the re-exported namespace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;name of the package&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;state&lt;/code&gt; (State)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;package state; one of &amp;ldquo;present&amp;rdquo; or &amp;ldquo;absent&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>package.rpm</title>
      <link>http://converge.aster.is/0.6.0/resources/package-rpm/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/package-rpm/</guid>
      <description>

&lt;p&gt;RPM Package manages system packages with &lt;code&gt;rpm&lt;/code&gt; and &lt;code&gt;yum&lt;/code&gt;. It assumes that
both &lt;code&gt;rpm&lt;/code&gt; and &lt;code&gt;yum&lt;/code&gt; are installed on the system, and that the user has
permissions to install, remove, and query packages.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;package.rpm &amp;quot;mc&amp;quot; {
  name  = &amp;quot;mc&amp;quot;
  state = &amp;quot;present&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; (required string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Name of the package or package group.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;state&lt;/code&gt; (State)&lt;/p&gt;

&lt;p&gt;Valid values: &lt;code&gt;present&lt;/code&gt; and &lt;code&gt;absent&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;State of the package. Present means the package will be installed if
missing; Absent means the package will be uninstalled if present.&lt;/p&gt;

&lt;h2 id=&#34;exported-fields&#34;&gt;Exported Fields&lt;/h2&gt;

&lt;p&gt;Here are the fields that are exported for use with &amp;lsquo;lookup&amp;rsquo;.  Re-exported fields
will have their own fields exported under the re-exported namespace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;name of the package&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;state&lt;/code&gt; (State)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;package state; one of &amp;ldquo;present&amp;rdquo; or &amp;ldquo;absent&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>param</title>
      <link>http://converge.aster.is/0.6.0/resources/param/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/param/</guid>
      <description>

&lt;p&gt;Param controls the flow of values through &lt;code&gt;module&lt;/code&gt; calls. You can use the
&lt;code&gt;{{param &amp;quot;name&amp;quot;}}&lt;/code&gt; template call anywhere you need the value of a param
inside the current module.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;param &amp;quot;message&amp;quot; {
  default = &amp;quot;Hello, World!&amp;quot;
}

param &amp;quot;filename&amp;quot; {
  default = &amp;quot;test.txt&amp;quot;
}

task &amp;quot;render&amp;quot; {
  check = &amp;quot;cat {{param `filename`}} | tee /dev/stderr | grep -q &#39;{{param `message`}}&#39;&amp;quot;
  apply = &amp;quot;echo &#39;{{param `message`}}&#39; &amp;gt; {{param `filename`}}&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt; (anything)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Default is an optional field that provides a default value if none is
provided to this parameter. If this field is not set, this param will be
treated as required.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>task</title>
      <link>http://converge.aster.is/0.6.0/resources/task/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/task/</guid>
      <description>

&lt;p&gt;Task allows you to run arbitrary shell commands on your system, first
checking if the command should be run.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;param &amp;quot;message&amp;quot; {
  default = &amp;quot;Hello, World!&amp;quot;
}

param &amp;quot;filename&amp;quot; {
  default = &amp;quot;test.txt&amp;quot;
}

task &amp;quot;render&amp;quot; {
  check = &amp;quot;cat {{param `filename`}} | tee /dev/stderr | grep -q &#39;{{param `message`}}&#39;&amp;quot;
  apply = &amp;quot;echo &#39;{{param `message`}}&#39; &amp;gt; {{param `filename`}}&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;interpreter&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the shell interpreter that will be used for your scripts. &lt;code&gt;/bin/sh&lt;/code&gt; is
used by default.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;check_flags&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;flags to pass to the &lt;code&gt;interpreter&lt;/code&gt; binary to check validity. For
&lt;code&gt;/bin/sh&lt;/code&gt; this is &lt;code&gt;-n&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exec_flags&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;flags to pass to the interpreter at execution time&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;check&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the script to run to check if a resource needs to be changed. It should
exit with exit code 0 if the resource does not need to be changed, and
1 (or above) otherwise.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apply&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the script to run to apply the resource. Normal shell exit code
expectations apply (that is, exit code 0 for success, 1 or above for
failure.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; (optional duration)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the amount of time the command will wait before halting forcefully.&lt;/p&gt;

&lt;p&gt;Acceptable formats are a number in seconds or a duration string. A Duration
represents the elapsed time between two instants as an int64 second count.
The representation limits the largest representable duration to approximately
290 years. A duration string is a possibly signed sequence of decimal numbers,
each with optional fraction and a unit suffix, such as &amp;ldquo;300ms&amp;rdquo;, &amp;ldquo;-1.5h&amp;rdquo; or
&amp;ldquo;2h45m&amp;rdquo;. Valid time units are &amp;ldquo;ns&amp;rdquo;, &amp;ldquo;us&amp;rdquo; (or &amp;ldquo;µs&amp;rdquo;), &amp;ldquo;ms&amp;rdquo;, &amp;ldquo;s&amp;rdquo;, &amp;ldquo;m&amp;rdquo;, &amp;ldquo;h&amp;rdquo;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dir&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the working directory this command should be run in&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;env&lt;/code&gt; (map of string to string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;any environment variables that should be passed to the command&lt;/p&gt;

&lt;h2 id=&#34;exported-fields&#34;&gt;Exported Fields&lt;/h2&gt;

&lt;p&gt;Here are the fields that are exported for use with &amp;lsquo;lookup&amp;rsquo;.  Re-exported fields
will have their own fields exported under the re-exported namespace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;check&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the check statement&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apply&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the apply statement&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dir&lt;/code&gt; (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the working directory of the task&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;env&lt;/code&gt; (list of strings)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;environment variables configured for the task&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;checkstatus&lt;/code&gt; (CommandResults)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the status of the check phase&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;healthstatus&lt;/code&gt; (resource.HealthStatus)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the status of the health check&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt; re-exports fields from CommandResults&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the status of the task&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>task.query</title>
      <link>http://converge.aster.is/0.6.0/resources/task-query/</link>
      <pubDate>Fri, 03 Mar 2017 10:23:30 -0600</pubDate>
      
      <guid>http://converge.aster.is/0.6.0/resources/task-query/</guid>
      <description>

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;task.query &amp;quot;hostname&amp;quot; {
  query = &amp;quot;hostname&amp;quot;
}

file.content &amp;quot;hostname-data&amp;quot; {
  destination = &amp;quot;hostname.txt&amp;quot;
  content     = &amp;quot;{{lookup `task.query.hostname.status.stdout`}}&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;Here are the HCL fields that you can specify, along with their expected types
and restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;interpreter&lt;/code&gt; (string)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;query&lt;/code&gt; (string)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;check_flags&lt;/code&gt; (list of strings)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;exec_flags&lt;/code&gt; (list of strings)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;timeout&lt;/code&gt; (optional duration)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Acceptable formats are a number in seconds or a duration string. A Duration
represents the elapsed time between two instants as an int64 second count.
The representation limits the largest representable duration to approximately
290 years. A duration string is a possibly signed sequence of decimal numbers,
each with optional fraction and a unit suffix, such as &amp;ldquo;300ms&amp;rdquo;, &amp;ldquo;-1.5h&amp;rdquo; or
&amp;ldquo;2h45m&amp;rdquo;. Valid time units are &amp;ldquo;ns&amp;rdquo;, &amp;ldquo;us&amp;rdquo; (or &amp;ldquo;µs&amp;rdquo;), &amp;ldquo;ms&amp;rdquo;, &amp;ldquo;s&amp;rdquo;, &amp;ldquo;m&amp;rdquo;, &amp;ldquo;h&amp;rdquo;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dir&lt;/code&gt; (string)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;env&lt;/code&gt; (map of string to string)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>